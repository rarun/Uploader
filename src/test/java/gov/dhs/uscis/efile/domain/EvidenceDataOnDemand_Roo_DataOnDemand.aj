// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package gov.dhs.uscis.efile.domain;

import gov.dhs.uscis.efile.domain.Applicant;
import gov.dhs.uscis.efile.domain.ApplicantDataOnDemand;
import gov.dhs.uscis.efile.domain.Evidence;
import gov.dhs.uscis.efile.domain.EvidenceDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EvidenceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EvidenceDataOnDemand: @Component;
    
    private Random EvidenceDataOnDemand.rnd = new SecureRandom();
    
    private List<Evidence> EvidenceDataOnDemand.data;
    
    @Autowired
    private ApplicantDataOnDemand EvidenceDataOnDemand.applicantDataOnDemand;
    
    public Evidence EvidenceDataOnDemand.getNewTransientEvidence(int index) {
        Evidence obj = new Evidence();
        setApplicant(obj, index);
        setContentType(obj, index);
        setFilepath(obj, index);
        setFilesize(obj, index);
        return obj;
    }
    
    public void EvidenceDataOnDemand.setApplicant(Evidence obj, int index) {
        Applicant applicant = applicantDataOnDemand.getRandomApplicant();
        obj.setApplicant(applicant);
    }
    
    public void EvidenceDataOnDemand.setContentType(Evidence obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void EvidenceDataOnDemand.setFilepath(Evidence obj, int index) {
        String filepath = "filepath_" + index;
        if (filepath.length() > 128) {
            filepath = filepath.substring(0, 128);
        }
        obj.setFilepath(filepath);
    }
    
    public void EvidenceDataOnDemand.setFilesize(Evidence obj, int index) {
        Long filesize = new Integer(index).longValue();
        obj.setFilesize(filesize);
    }
    
    public Evidence EvidenceDataOnDemand.getSpecificEvidence(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Evidence obj = data.get(index);
        Long id = obj.getId();
        return Evidence.findEvidence(id);
    }
    
    public Evidence EvidenceDataOnDemand.getRandomEvidence() {
        init();
        Evidence obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Evidence.findEvidence(id);
    }
    
    public boolean EvidenceDataOnDemand.modifyEvidence(Evidence obj) {
        return false;
    }
    
    public void EvidenceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Evidence.findEvidenceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Evidence' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Evidence>();
        for (int i = 0; i < 10; i++) {
            Evidence obj = getNewTransientEvidence(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
