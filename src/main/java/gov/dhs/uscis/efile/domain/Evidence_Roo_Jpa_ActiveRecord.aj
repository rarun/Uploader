// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package gov.dhs.uscis.efile.domain;

import gov.dhs.uscis.efile.domain.Evidence;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Evidence_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Evidence.entityManager;
    
    public static final EntityManager Evidence.entityManager() {
        EntityManager em = new Evidence().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Evidence.countEvidences() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Evidence o", Long.class).getSingleResult();
    }
    
    public static List<Evidence> Evidence.findAllEvidences() {
        return entityManager().createQuery("SELECT o FROM Evidence o", Evidence.class).getResultList();
    }
    
    public static Evidence Evidence.findEvidence(Long id) {
        if (id == null) return null;
        return entityManager().find(Evidence.class, id);
    }
    
    public static List<Evidence> Evidence.findEvidenceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Evidence o", Evidence.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Evidence.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Evidence.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Evidence attached = Evidence.findEvidence(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Evidence.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Evidence.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Evidence Evidence.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Evidence merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
